function solveSudoku(matrix = []) { 
   
function compare(erase, change) {  
  let len = (erase.length>=change.length)?erase.length:change.length;
  _arr = change; print(_arr+'/');
  arr = erase;  print(arr+'/');  
  for (let i = 0; i < len; i++){
      if (_arr.indexOf(arr[i]) !== -1) _arr.splice(_arr.indexOf(arr[i]), 1); 
  }   
  return _arr;
}
function clean(matrix) {  
  let len = matrix.length;  
  let _arr = matrix;
  for (let i = 0; i < len; i++){
      if (_arr.indexOf(0) !== -1) _arr.splice(_arr.indexOf(0), 1); 
  } 
  return _arr;
}
      const fin = matrix.length; 
      let decided = false;
      let row = [];
      let column = [];
      let square = [];
      let options = [];
      let matrixCh = matrix;
      while ( decided === false ){
          for (let i = 0; i < fin; i++){
             for (let j = 0; j < fin; j++){
                if (matrixCh[i][j] === 0){
                   for (let k=0; k < fin; k++){
                       row[k] = matrixCh[i][k]; 
                       column[k] = matrixCh[k][j];
                   }  
                   let y = (i<=2)?0:(i>=6)?6:3; 
                   let q = (i<=2)?3:(i>=6)?9:6;
                   let m = (j<=2)?0:(j>=6)?6:3; 
                   let t = (j<=2)?3:(j>=6)?9:6; 
                   let n = 0; 
                   for (let k = y; k < q; k++) { 
                       for (let l = m; l < t; l++) { 
                           square[n] = matrixCh[k][l];
                           n++;  
                       }
                   } 
                   row = clean(row); //print(row+'r');   
                   square = clean(square); //print(square+'s'); 
                   column = clean(column); //print(column+'c');
                   options = compare(square, [1,2,3,4,5,6,7,8,9]); print(options+' 1');
                   options = compare(row, options); print(options); print(options+' 2');
                   options = compare(column, options); print(options); print(options+' 3');
                   matrixCh[i][j] = (options.length === 1)?options[0]:0; print(matrixCh[i][j]+' otvet');
                }
                else decided = true;
             }
          }
      } 
    matrix = matrixCh;
    return matrix;
}    
print(solveSudoku([
    [6, 5, 0, 7, 3, 0, 0, 8, 0],
    [0, 0, 0, 4, 8, 0, 5, 3, 0],
    [8, 4, 0, 9, 2, 5, 0, 0, 0],
    [0, 9, 0, 8, 0, 0, 0, 0, 0],
    [5, 3, 0, 2, 0, 9, 6, 0, 0],
    [0, 0, 6, 0, 0, 0, 8, 0, 0],
    [0, 0, 9, 0, 0, 0, 0, 0, 6],
    [0, 0, 7, 0, 0, 0, 0, 5, 0],
    [1, 6, 5, 3, 9, 0, 4, 7, 0]
  ]));